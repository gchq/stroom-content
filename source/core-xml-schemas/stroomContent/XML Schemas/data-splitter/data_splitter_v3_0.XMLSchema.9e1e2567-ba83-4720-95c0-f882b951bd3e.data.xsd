<?xml version="1.0" encoding="UTF-8"?>
<!-- UK Crown Copyright Â© 2016 -->
<xs:schema xmlns:ds="data-splitter:3"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           elementFormDefault="qualified"
           attributeFormDefault="unqualified"
           targetNamespace="data-splitter:3"
           id="data-splitter-v3.0"
           version="3.0">
   <xs:element name="dataSplitter">
      <xs:annotation>
         <xs:documentation>The root element for all 2nd generation Data Splitter configuration.</xs:documentation>
      </xs:annotation>
      <xs:complexType>
         <xs:sequence>
            <xs:choice minOccurs="1" maxOccurs="100">
               <xs:element name="split" type="ds:SplitComplexType" minOccurs="1" maxOccurs="1">
                  <xs:annotation>
                     <xs:documentation>Element used to split content using a delimiter. The content used by this expression is taken from the supplied input data.</xs:documentation>
                  </xs:annotation>
               </xs:element>
               <xs:element name="regex" type="ds:RegexComplexType" minOccurs="1" maxOccurs="1">
                  <xs:annotation>
                     <xs:documentation>Element used to split content using a regular expression. The content used by this expression is taken from the supplied input data.</xs:documentation>
                  </xs:annotation>
               </xs:element>
            </xs:choice>
         </xs:sequence>
         <xs:attribute name="version" use="required">
            <xs:annotation>
               <xs:documentation>This is a required attribute and is used to define the version of Data Splitter configuration that is being used.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="ds:VersionSimpleType">
                  <xs:enumeration value="3.0"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="bufferSize" use="optional">
            <xs:annotation>
               <xs:documentation>This is an optional attribute used to tune the size of the character buffer. The default size is 20000 characters and should be fine for most translations. The minimum value that this can be set to is 20000 characters and the maximum is 1000000.</xs:documentation>
            </xs:annotation>
            <xs:simpleType>
               <xs:restriction base="xs:int">
                  <xs:minInclusive value="20000"/>
                  <xs:maxInclusive value="1000000000"/>
               </xs:restriction>
            </xs:simpleType>
         </xs:attribute>
         <xs:attribute name="ignoreErrors" type="xs:boolean" use="optional">
            <xs:annotation>
               <xs:documentation>Optional attribute used to tell the parser not to generate errors caused by top level expressions not matching all of the supplied content. If this attribute is not specified the parser will generate all errors. Setting this attribute to true should be used with caution as errors that would occur when unexpected content is found will be suppressed. It is usually better to write expressions that capture all of the supplied content and discard unwanted characters.</xs:documentation>
            </xs:annotation>
         </xs:attribute>
      </xs:complexType>
   </xs:element>
   <xs:simpleType name="VersionSimpleType">
      <xs:annotation>
         <xs:documentation>This type constrains the format of version numbers to x.y.z.</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string"/>
   </xs:simpleType>
   <xs:complexType name="SplitComplexType">
      <xs:annotation>
         <xs:documentation>This type describes the allowed attributes and element structure for the 'split' element.</xs:documentation>
      </xs:annotation>
      <xs:choice minOccurs="0" maxOccurs="100">
         <xs:element name="var" type="ds:VarComplexType" minOccurs="0" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to store the current match from the parent expression.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="data" type="ds:DataComplexType" minOccurs="0" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to output a 'data' element with 'name' and 'value' attributes whose values are either taken from the current match in the parent expression or from content stored by a var element.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="group" type="ds:GroupComplexType" minOccurs="0" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to select a group from the match in the parent expression and pass the content of the group match onto child data elements and expressions.</xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:choice>
      <xs:attribute name="id" type="ds:IdSimpleType" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to identify this element so that it can be used in reporting errors. The value must be one or more alpha characters.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minMatch" type="xs:positiveInteger" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify the minimum number of times this expression should match the supplied content. If you do not supply this attribute then the Data Splitter will not enforce that this expression matches the supplied content. If specified the Data Splitter will generate an error if this expression does not match the supplied content at least as many times as specified.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxMatch" type="xs:positiveInteger" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify the maximum number of times this expression is allowed to match the supplied content. If you do not supply this attribute then the Data Splitter will keep matching the supplied content until it reaches the end. If specified the Data Splitter will stop matching the supplied content when it has matched it the specified number of times.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onlyMatch" use="optional">
         <xs:annotation>
            <xs:documentation>Optional attribute to use this expression only for specific instances of a match of the parent expression, e.g. on the 4th, 5th and 8th matches of the parent expression specified by '4,5,8'. This is used when this expression should only be used to subdivide content from certain parent divisions.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:string">
               <xs:pattern value="((\d+,)*\d+)?"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="delimiter" type="xs:string" use="required">
         <xs:annotation>
            <xs:documentation>A required attribute used to specify the character string that will be used as a delimiter to split the supplied content unless it is preceeded by an escape character or within a container if specified.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="escape" type="xs:string" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify a character sequence that is used to escape the delimiter. Many delimited text formats have an escape character that is used to tell any parser that the following delimiter should be ignored, e.g. often a character such as '\' is used to escape the character that follows it so that it is not treated as a delimiter. When specified this escape sequence also applies to any container characters that may be specified.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="containerStart" type="xs:string" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify a character sequence that will make this expression to ignore the presence of delimiters util an end container is found. If the character is preceeded by the specified escape sequence then this container sequence will be ignored and the sxpressino will continue matching characters up to a delimiter.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="containerEnd" type="xs:string" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify a character sequence that will make this expression stop ignoring the presence of delimiters if it believes it is currently in a container. If the character is preceeded by the specified escape sequence then this container sequence will be ignored and the expression will continue matching characters while ignoring the presence of any delimiter.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="RegexComplexType">
      <xs:annotation>
         <xs:documentation>This type describes the allowed attributes and element structure for the 'regex' element.</xs:documentation>
      </xs:annotation>
      <xs:choice minOccurs="0" maxOccurs="100">
         <xs:element name="var" type="ds:VarComplexType" minOccurs="0" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to store the current match from the parent expression.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="data" type="ds:DataComplexType" minOccurs="0" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to output a 'data' element with 'name' and 'value' attributes whose values are either taken from the current match in the parent expression or from content stored by a var element.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="group" type="ds:GroupComplexType" minOccurs="0" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to select a group from the match in the parent expression and pass the content of the group match onto child data elements and expressions.</xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:choice>
      <xs:attribute name="id" type="ds:IdSimpleType" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to identify this element so that it can be used in reporting errors. The value must be one or more alpha characters.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="minMatch" type="xs:positiveInteger" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify the minimum number of times this expression should match the supplied content. If you do not supply this attribute then the Data Splitter will not enforce that this expression matches the supplied content. If specified the Data Splitter will generate an error if this expression does not match the supplied content at least as many times as specified.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="maxMatch" type="xs:positiveInteger" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify the maximum number of times this expression is allowed to match the supplied content. If you do not supply this attribute then the Data Splitter will keep matching the supplied content until it reaches the end. If specified the Data Splitter will stop matching the supplied content when it has matched it the specified number of times.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="onlyMatch" use="optional">
         <xs:annotation>
            <xs:documentation>Optional attribute to use this expression only for specific instances of a match of the parent expression, e.g. on the 4th, 5th and 8th matches of the parent expression specified by '4,5,8'. This is used when this expression should only be used to subdivide content from certain parent divisions.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:string">
               <xs:pattern value="((\d+,)*\d+)?"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="pattern" type="xs:string" use="required">
         <xs:annotation>
            <xs:documentation>A required attribute to specify the regular expression to use to match on the supplied content. The pattern is used to match the content multiple times until the end of the content is reached while the maxMatch and onlyMatch conditions are satisfied.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="caseInsensitive" type="xs:boolean" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify if the supplied pattern should match content in a case insensitive way. If 'true' the expression will match content in a case insensitive manner, if 'false' it will match the content in a case sensitive manner. If this attribute is not specified it defaults to 'false' and will match the content in a case sensitive manner.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="dotAll" type="xs:boolean" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify if the use of '.' in the supplied pattern matches all characters including new lines. If 'true' '.' will match all characters including new lines, if 'false' it will only match up to a new line. If this attribute is not specified it defaults to 'false' and will only match up to a new line.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="advance" type="xs:positiveInteger" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to determine how far to move the content on ready for the next match. By default a regular expression match will advance the content buffer to the end of the whole match ready for subsequent expressions, however in some cases it is necessary to match some content that is still required by subsequent expressions. In these cases the user can specify a match group whose end position shall be used to advance the content buffer.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="AllComplexType">
      <xs:annotation>
         <xs:documentation>This type describes the allowed attributes and element structure for the 'all' element.</xs:documentation>
      </xs:annotation>
      <xs:choice minOccurs="0" maxOccurs="100">
         <xs:element name="var" type="ds:VarComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to store the current match from the parent expression.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="data" type="ds:DataComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to output a 'data' element with 'name' and 'value' attributes whose values are either taken from the current match in the parent expression or from content stored by a var element.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="group" type="ds:GroupComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to select a group from the match in the parent expression and pass the content of the group match onto child data elements and expressions.</xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:choice>
      <xs:attribute name="id" type="ds:IdSimpleType" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to identify this element so that it can be used in reporting errors. The value must be one or more alpha characters.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="GroupComplexType">
      <xs:annotation>
         <xs:documentation>This type describes the allowed attributes and element structure for the 'group' element.</xs:documentation>
      </xs:annotation>
      <xs:choice minOccurs="1" maxOccurs="100">
         <xs:element name="regex" type="ds:RegexComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to split content using a regular expression. The content used by this expression is taken from the current match in the parent expression.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="split" type="ds:SplitComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to split content using a delimiter. The content used by this expression is taken from the current match in the parent expression. When using this expression child expressions and data elements will receive all matched content including the end delimiter and outermost containers unless they choose group 1 from the match, e.g. the default (group 0) match would be '"value",' and the group 1 match would be 'value'.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="all" type="ds:AllComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to match the entire content of the parent group. This is often used as a catch all after a series of regex elements and is the same as &lt;regex pattern=".*"&gt; although performs better.</xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:choice>
      <xs:attribute name="id" type="ds:IdSimpleType" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to identify this element so that it can be used in reporting errors. The value must be one or more alpha characters.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value" type="ds:RefSimpleType" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to specify the content that will be presented to child expressions. This is constructed the same way as values for data name and value attributes. If you do not supply this attribute then this group will default to using the entire match from the parent expression.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="reverse" type="xs:boolean">
         <xs:annotation>
            <xs:documentation>Optional attribute used to tell the parser to reverse the content that this group supplied to child expressions. This is useful when it is easier to create an expression for reversed input than normal input. If omitted this attribute defaults to false and no content is reversed.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="matchOrder" use="optional">
         <xs:annotation>
            <xs:documentation>Optional attribute used to control how content is consumed by expression matches. Content can be consumed in sequence or in any order. When matching in sequence, each match consumes some content and the content position is moved beyond the match ready for the subsequent match. When matching in any order, each match removes the matched section from the content rather than moving the position past the match so that all remaining content can be matched by subsequent expressions. If the attribute is omitted by default the match order will be sequential. This is the default behaviour as tokens are most often in sequence and consuming content in this way is more efficient as content does not need to be copied by the parser to chop out sections as is required for matching in any order.</xs:documentation>
         </xs:annotation>
         <xs:simpleType>
            <xs:restriction base="xs:string">
               <xs:enumeration value="sequence"/>
               <xs:enumeration value="any"/>
            </xs:restriction>
         </xs:simpleType>
      </xs:attribute>
      <xs:attribute name="ignoreErrors" type="xs:boolean" use="optional">
         <xs:annotation>
            <xs:documentation>Optional attribute used to tell the parser not to generate errors caused by child expressions not matching all of the content supplied by this group. If this attribute is not specified the parser will generate all errors. Setting this attribute to true should be used with caution as errors that would occur when unexpected content is found will be suppressed. It is usually better to write expressions that capture all of the supplied content and discard unwanted characters.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="VarComplexType">
      <xs:annotation>
         <xs:documentation>This type describes the allowed attributes for the 'var' element.</xs:documentation>
      </xs:annotation>
      <xs:attribute name="id" type="ds:IdSimpleType" use="required">
         <xs:annotation>
            <xs:documentation>A required attribute used to identify this element so that it can be referenced by other data elements and used in reporting errors. The value must be one or more alpha characters.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:complexType name="DataComplexType">
      <xs:annotation>
         <xs:documentation>This type describes the allowed attributes for the 'data' element. 'data' and 'group' elements can be nested inside a data element to create nested output.</xs:documentation>
      </xs:annotation>
      <xs:choice minOccurs="0" maxOccurs="100">
         <xs:element name="var" type="ds:VarComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to store the current match from the parent expression.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="data" type="ds:DataComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to output a 'data' element with 'name' and 'value' attributes whose values are either taken from the current match in the parent expression or from content stored by a var element.</xs:documentation>
            </xs:annotation>
         </xs:element>
         <xs:element name="group" type="ds:GroupComplexType" minOccurs="1" maxOccurs="1">
            <xs:annotation>
               <xs:documentation>Element used to select a group from the match in the parent expression and pass the content of the group match onto child data elements and expressions.</xs:documentation>
            </xs:annotation>
         </xs:element>
      </xs:choice>
      <xs:attribute name="id" type="ds:IdSimpleType" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to identify this element so that it can be used in reporting errors. The value must be one or more alpha characters.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="name" type="ds:RefSimpleType" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to determine if this element will output data with a 'name' attribute and where the attribute value will come from. The way in which content is selected for the attribute value is described in the associated type.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
      <xs:attribute name="value" type="ds:RefSimpleType" use="optional">
         <xs:annotation>
            <xs:documentation>An optional attribute used to determine if this element will output data with a 'value' attribute and where the attribute value will come from. The way in which content is selected for the attribute value is described in the associated type.</xs:documentation>
         </xs:annotation>
      </xs:attribute>
   </xs:complexType>
   <xs:simpleType name="IdSimpleType">
      <xs:restriction base="xs:string">
         <xs:pattern value="[a-z][a-zA-Z0-9]*"/>
      </xs:restriction>
   </xs:simpleType>
   <xs:simpleType name="RefSimpleType">
      <xs:annotation>
         <xs:documentation>This type constrains the format of references. Valid values are: $ - Use the current full match. $1 - Use group 1 of the current match. $refid$ - A reference to another data item by id $refid$1 - A reference to another data item by id using match group 1 of the referenced data item. $refid$1[4] - A reference to another data item by id using match group 1 of the referenced data item and match 5 (0 indexed).</xs:documentation>
      </xs:annotation>
      <xs:restriction base="xs:string">
         <xs:pattern value="(('([^']|'')+'|\$[a-z][a-zA-Z0-9]*\$\d*(\[[\+\-]\d+\]|\[\d+\])?|\$\d*(\[[\+\-]\d+\]|\[\d+\])?)(\+('([^']|'')+'|\$[a-z][a-zA-Z0-9]*\$\d*(\[[\+\-]\d+\]|\[\d+\])?|\$\d*(\[[\+\-]\d+\]|\[\d+\])?))*)|[^$'].*"/>
      </xs:restriction>
   </xs:simpleType>
</xs:schema>